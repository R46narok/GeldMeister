// <auto-generated />
using System;
using BankStatements.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankStatements.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(BankStatementsDbContext))]
    [Migration("20230510162701_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BankId")
                        .IsUnique();

                    b.ToTable("BankSchemes");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankSchemeProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SchemeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchemeId");

                    b.ToTable("BankSchemeProperties");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankStatements");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("StatementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.TransactionField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionFields");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankScheme", b =>
                {
                    b.HasOne("BankStatements.Domain.BankAggregate.Bank", "Bank")
                        .WithOne("Scheme")
                        .HasForeignKey("BankStatements.Domain.BankAggregate.BankScheme", "BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankSchemeProperty", b =>
                {
                    b.HasOne("BankStatements.Domain.BankAggregate.BankScheme", "Scheme")
                        .WithMany("Properties")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankStatement", b =>
                {
                    b.HasOne("BankStatements.Domain.BankAggregate.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.Transaction", b =>
                {
                    b.HasOne("BankStatements.Domain.BankAggregate.BankStatement", "Statement")
                        .WithMany("Transactions")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.TransactionField", b =>
                {
                    b.HasOne("BankStatements.Domain.BankAggregate.BankSchemeProperty", "Property")
                        .WithMany("TransactionFields")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankStatements.Domain.BankAggregate.Transaction", "Transaction")
                        .WithMany("TransactionFields")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.Bank", b =>
                {
                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankScheme", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankSchemeProperty", b =>
                {
                    b.Navigation("TransactionFields");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.BankStatement", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BankStatements.Domain.BankAggregate.Transaction", b =>
                {
                    b.Navigation("TransactionFields");
                });
#pragma warning restore 612, 618
        }
    }
}
